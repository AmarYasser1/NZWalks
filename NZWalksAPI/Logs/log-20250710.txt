2025-07-10 19:54:54.903 +03:00 [INF] User profile is available. Using 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-07-10 19:54:55.072 +03:00 [INF] Now listening on: https://localhost:7123
2025-07-10 19:54:55.076 +03:00 [INF] Now listening on: http://localhost:5026
2025-07-10 19:54:55.120 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2025-07-10 19:54:55.122 +03:00 [INF] Hosting environment: Development
2025-07-10 19:54:55.124 +03:00 [INF] Content root path: D:\Projects (.NET)\NZWalks\NZWalksAPI
2025-07-10 20:13:38.530 +03:00 [INF] User profile is available. Using 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-07-10 20:13:38.763 +03:00 [INF] Now listening on: https://localhost:7123
2025-07-10 20:13:38.766 +03:00 [INF] Now listening on: http://localhost:5026
2025-07-10 20:13:38.813 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2025-07-10 20:13:38.814 +03:00 [INF] Hosting environment: Development
2025-07-10 20:13:38.816 +03:00 [INF] Content root path: D:\Projects (.NET)\NZWalks\NZWalksAPI
2025-07-10 20:13:56.865 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/_vs/browserLink - null null
2025-07-10 20:13:56.865 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/_framework/aspnetcore-browser-refresh.js - null null
2025-07-10 20:13:56.899 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/_framework/aspnetcore-browser-refresh.js - 200 16506 application/javascript; charset=utf-8 38.3468ms
2025-07-10 20:13:56.911 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/_vs/browserLink - 200 null text/javascript; charset=UTF-8 50.409ms
2025-07-10 20:13:57.174 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/swagger/v1/swagger.json - null null
2025-07-10 20:13:57.288 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 114.0511ms
2025-07-10 20:14:02.120 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/api/Walks - null null
2025-07-10 20:14:02.178 +03:00 [INF] Executing endpoint 'NZWalks.API.Controllers.WalksController.GetAll (NZWalks.API)'
2025-07-10 20:14:02.199 +03:00 [INF] Route matched with {action = "GetAll", controller = "Walks"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAll(NZWalks.API.Models.Domain.WalkQueryParameters) on controller NZWalks.API.Controllers.WalksController (NZWalks.API).
2025-07-10 20:14:03.339 +03:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-07-10 20:14:03.343 +03:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-07-10 20:14:03.865 +03:00 [INF] Executed DbCommand (53ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [w0].[Id], [w0].[Description], [w0].[DifficultyId], [w0].[LengthInKm], [w0].[Name], [w0].[RegionId], [w0].[WalkImageUrl], [d].[Id], [d].[Name], [r].[Id], [r].[Code], [r].[Name], [r].[RegionImageUrl]
FROM (
    SELECT [w].[Id], [w].[Description], [w].[DifficultyId], [w].[LengthInKm], [w].[Name], [w].[RegionId], [w].[WalkImageUrl]
    FROM [Walks] AS [w]
    ORDER BY (SELECT 1)
    OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
) AS [w0]
INNER JOIN [Difficulties] AS [d] ON [w0].[DifficultyId] = [d].[Id]
INNER JOIN [Regions] AS [r] ON [w0].[RegionId] = [r].[Id]
2025-07-10 20:14:03.988 +03:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[NZWalks.API.Models.DTOs.WalkDto, NZWalks.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-07-10 20:14:04.015 +03:00 [INF] Executed action NZWalks.API.Controllers.WalksController.GetAll (NZWalks.API) in 1807.0644ms
2025-07-10 20:14:04.019 +03:00 [INF] Executed endpoint 'NZWalks.API.Controllers.WalksController.GetAll (NZWalks.API)'
2025-07-10 20:14:04.030 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/api/Walks - 200 null application/json; charset=utf-8 1909.7503ms
2025-07-10 20:14:15.848 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/WeatherForecast - null null
2025-07-10 20:14:15.856 +03:00 [INF] Executing endpoint 'NZWalksAPI.Controllers.WeatherForecastController.Get (NZWalks.API)'
2025-07-10 20:14:15.860 +03:00 [INF] Route matched with {action = "Get", controller = "WeatherForecast"}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[NZWalksAPI.WeatherForecast] Get() on controller NZWalksAPI.Controllers.WeatherForecastController (NZWalks.API).
2025-07-10 20:14:16.029 +03:00 [INF] Executed action NZWalksAPI.Controllers.WeatherForecastController.Get (NZWalks.API) in 167.4947ms
2025-07-10 20:14:16.090 +03:00 [INF] Executed endpoint 'NZWalksAPI.Controllers.WeatherForecastController.Get (NZWalks.API)'
2025-07-10 20:14:16.162 +03:00 [ERR] b8647be9-eaac-4533-8908-45cb6d9d9e36 : Test Global Exception handling.
System.Exception: Test Global Exception handling.
   at NZWalksAPI.Controllers.WeatherForecastController.Get() in D:\Projects (.NET)\NZWalks\NZWalksAPI\Controllers\WeatherForecastController.cs:line 24
   at lambda_method150(Closure, Object, Object[])
   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at NZWalks.API.Middlewares.ExceptionHanderMiddleware.InvokeAsync(HttpContext httpContext) in D:\Projects (.NET)\NZWalks\NZWalksAPI\Middlewares\ExceptionHanderMiddleware.cs:line 20
2025-07-10 20:14:16.218 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/WeatherForecast - 500 null application/json; charset=utf-8 369.9758ms
2025-07-10 23:38:25.944 +03:00 [INF] User profile is available. Using 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-07-10 23:38:26.191 +03:00 [INF] Now listening on: https://localhost:7123
2025-07-10 23:38:26.195 +03:00 [INF] Now listening on: http://localhost:5026
2025-07-10 23:38:26.230 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2025-07-10 23:38:26.232 +03:00 [INF] Hosting environment: Development
2025-07-10 23:38:26.233 +03:00 [INF] Content root path: D:\Projects (.NET)\NZWalks\NZWalksAPI
2025-07-10 23:38:26.316 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/_vs/browserLink - null null
2025-07-10 23:38:26.361 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/_vs/browserLink - 200 null text/javascript; charset=UTF-8 48.3675ms
2025-07-10 23:38:26.389 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/swagger/v1/swagger.json - null null
2025-07-10 23:38:26.558 +03:00 [ERR] An unhandled exception has occurred while executing the request.
Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination "GET WeatherForecast" for actions - NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API), NZWalksAPI.Controllers.WeatherForecastController.GetV2 (NZWalks.API). Actions require a unique method/path combination for Swagger/OpenAPI 2.0 and 3.0. Use ConflictingActionsResolver as a workaround or provide your own implementation of PathGroupSelector.
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.PrepareGenerateOperation(IGrouping`2 group)
   at System.Linq.Enumerable.IteratorSelectIterator`2.MoveNext()
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GenerateOperationsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePathsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository, Func`4 operationsGenerator)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePathsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerAsync(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2025-07-10 23:38:26.582 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/swagger/v1/swagger.json - 500 null text/plain; charset=utf-8 192.8411ms
2025-07-10 23:39:18.294 +03:00 [INF] User profile is available. Using 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-07-10 23:39:18.542 +03:00 [INF] Now listening on: https://localhost:7123
2025-07-10 23:39:18.543 +03:00 [INF] Now listening on: http://localhost:5026
2025-07-10 23:39:18.580 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2025-07-10 23:39:18.581 +03:00 [INF] Hosting environment: Development
2025-07-10 23:39:18.582 +03:00 [INF] Content root path: D:\Projects (.NET)\NZWalks\NZWalksAPI
2025-07-10 23:39:25.318 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/_framework/aspnetcore-browser-refresh.js - null null
2025-07-10 23:39:25.318 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/_vs/browserLink - null null
2025-07-10 23:39:25.355 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/_framework/aspnetcore-browser-refresh.js - 200 16506 application/javascript; charset=utf-8 40.8458ms
2025-07-10 23:39:25.367 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/_vs/browserLink - 200 null text/javascript; charset=UTF-8 53.655ms
2025-07-10 23:39:25.636 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/swagger/v1/swagger.json - null null
2025-07-10 23:39:25.794 +03:00 [ERR] An unhandled exception has occurred while executing the request.
Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination "GET WeatherForecast" for actions - NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API), NZWalksAPI.Controllers.WeatherForecastController.GetV2 (NZWalks.API). Actions require a unique method/path combination for Swagger/OpenAPI 2.0 and 3.0. Use ConflictingActionsResolver as a workaround or provide your own implementation of PathGroupSelector.
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.PrepareGenerateOperation(IGrouping`2 group)
   at System.Linq.Enumerable.IteratorSelectIterator`2.MoveNext()
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GenerateOperationsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePathsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository, Func`4 operationsGenerator)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePathsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerAsync(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2025-07-10 23:39:25.818 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/swagger/v1/swagger.json - 500 null text/plain; charset=utf-8 182.6465ms
2025-07-10 23:41:45.186 +03:00 [INF] User profile is available. Using 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-07-10 23:41:45.373 +03:00 [INF] Now listening on: https://localhost:7123
2025-07-10 23:41:45.376 +03:00 [INF] Now listening on: http://localhost:5026
2025-07-10 23:41:45.447 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2025-07-10 23:41:45.450 +03:00 [INF] Hosting environment: Development
2025-07-10 23:41:45.452 +03:00 [INF] Content root path: D:\Projects (.NET)\NZWalks\NZWalksAPI
2025-07-10 23:41:53.055 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/_framework/aspnetcore-browser-refresh.js - null null
2025-07-10 23:41:53.055 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/_vs/browserLink - null null
2025-07-10 23:41:53.077 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/_framework/aspnetcore-browser-refresh.js - 200 16506 application/javascript; charset=utf-8 24.9537ms
2025-07-10 23:41:53.104 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/_vs/browserLink - 200 null text/javascript; charset=UTF-8 53.4434ms
2025-07-10 23:41:53.136 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/swagger/v1/swagger.json - null null
2025-07-10 23:41:53.307 +03:00 [ERR] An unhandled exception has occurred while executing the request.
Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination "GET WeatherForecast" for actions - NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API), NZWalksAPI.Controllers.WeatherForecastController.GetV2 (NZWalks.API). Actions require a unique method/path combination for Swagger/OpenAPI 2.0 and 3.0. Use ConflictingActionsResolver as a workaround or provide your own implementation of PathGroupSelector.
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.PrepareGenerateOperation(IGrouping`2 group)
   at System.Linq.Enumerable.IteratorSelectIterator`2.MoveNext()
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GenerateOperationsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePathsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository, Func`4 operationsGenerator)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePathsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerAsync(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2025-07-10 23:41:53.330 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/swagger/v1/swagger.json - 500 null text/plain; charset=utf-8 194.8795ms
2025-07-10 23:41:59.977 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/_framework/aspnetcore-browser-refresh.js - null null
2025-07-10 23:41:59.977 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/_vs/browserLink - null null
2025-07-10 23:41:59.982 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/_framework/aspnetcore-browser-refresh.js - 200 16506 application/javascript; charset=utf-8 5.0147ms
2025-07-10 23:41:59.993 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/_vs/browserLink - 200 null text/javascript; charset=UTF-8 16.1667ms
2025-07-10 23:42:00.041 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/swagger/v1/swagger.json - null null
2025-07-10 23:42:00.123 +03:00 [ERR] An unhandled exception has occurred while executing the request.
Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination "GET WeatherForecast" for actions - NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API), NZWalksAPI.Controllers.WeatherForecastController.GetV2 (NZWalks.API). Actions require a unique method/path combination for Swagger/OpenAPI 2.0 and 3.0. Use ConflictingActionsResolver as a workaround or provide your own implementation of PathGroupSelector.
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.PrepareGenerateOperation(IGrouping`2 group)
   at System.Linq.Enumerable.IteratorSelectIterator`2.MoveNext()
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GenerateOperationsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePathsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository, Func`4 operationsGenerator)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePathsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerAsync(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2025-07-10 23:42:00.125 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/swagger/v1/swagger.json - 500 null text/plain; charset=utf-8 83.8506ms
2025-07-10 23:43:10.153 +03:00 [INF] User profile is available. Using 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-07-10 23:43:10.337 +03:00 [INF] Now listening on: https://localhost:7123
2025-07-10 23:43:10.340 +03:00 [INF] Now listening on: http://localhost:5026
2025-07-10 23:43:10.376 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2025-07-10 23:43:10.379 +03:00 [INF] Hosting environment: Development
2025-07-10 23:43:10.380 +03:00 [INF] Content root path: D:\Projects (.NET)\NZWalks\NZWalksAPI
2025-07-10 23:43:14.935 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/_framework/aspnetcore-browser-refresh.js - null null
2025-07-10 23:43:14.935 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/_vs/browserLink - null null
2025-07-10 23:43:15.020 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/_framework/aspnetcore-browser-refresh.js - 200 16506 application/javascript; charset=utf-8 89.4734ms
2025-07-10 23:43:15.034 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/_vs/browserLink - 200 null text/javascript; charset=UTF-8 103.9609ms
2025-07-10 23:43:15.063 +03:00 [INF] Request starting HTTP/2 GET https://localhost:7123/swagger/v1/swagger.json - null null
2025-07-10 23:43:15.229 +03:00 [ERR] An unhandled exception has occurred while executing the request.
Swashbuckle.AspNetCore.SwaggerGen.SwaggerGeneratorException: Conflicting method/path combination "GET WeatherForecast" for actions - NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API), NZWalksAPI.Controllers.WeatherForecastController.GetV2 (NZWalks.API). Actions require a unique method/path combination for Swagger/OpenAPI 2.0 and 3.0. Use ConflictingActionsResolver as a workaround or provide your own implementation of PathGroupSelector.
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.PrepareGenerateOperation(IGrouping`2 group)
   at System.Linq.Enumerable.IteratorSelectIterator`2.MoveNext()
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GenerateOperationsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePathsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository, Func`4 operationsGenerator)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GeneratePathsAsync(OpenApiDocument document, IEnumerable`1 apiDescriptions, SchemaRepository schemaRepository)
   at Swashbuckle.AspNetCore.SwaggerGen.SwaggerGenerator.GetSwaggerAsync(String documentName, String host, String basePath)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2025-07-10 23:43:15.254 +03:00 [INF] Request finished HTTP/2 GET https://localhost:7123/swagger/v1/swagger.json - 500 null text/plain; charset=utf-8 191.6823ms
2025-07-10 23:43:39.251 +03:00 [INF] Request starting HTTP/1.1 GET https://localhost:7123/api/Regions/906cb139-415a-4bbb-a174-1a1faf9fb1f6 - application/json 186
2025-07-10 23:43:40.594 +03:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:43:40 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-07-10 23:43:40.603 +03:00 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:43:40 PM'.
2025-07-10 23:43:40.609 +03:00 [INF] Authorization failed. These requirements were not met:
RolesAuthorizationRequirement:User.IsInRole must be true for one of the following roles: (Reader)
2025-07-10 23:43:40.614 +03:00 [INF] AuthenticationScheme: Bearer was challenged.
2025-07-10 23:43:40.616 +03:00 [INF] Request finished HTTP/1.1 GET https://localhost:7123/api/Regions/906cb139-415a-4bbb-a174-1a1faf9fb1f6 - 401 0 null 1365.5019ms
2025-07-10 23:43:53.476 +03:00 [INF] Request starting HTTP/1.1 GET https://localhost:7123/api/Walks - application/json 186
2025-07-10 23:43:53.533 +03:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:43:53 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-07-10 23:43:53.539 +03:00 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:43:53 PM'.
2025-07-10 23:43:53.542 +03:00 [INF] Executing endpoint 'NZWalks.API.Controllers.WalksController.GetAll (NZWalks.API)'
2025-07-10 23:43:53.561 +03:00 [INF] Route matched with {action = "GetAll", controller = "Walks"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAll(NZWalks.API.Models.Domain.WalkQueryParameters) on controller NZWalks.API.Controllers.WalksController (NZWalks.API).
2025-07-10 23:43:54.510 +03:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-07-10 23:43:54.512 +03:00 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2025-07-10 23:43:54.936 +03:00 [INF] Executed DbCommand (39ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [w0].[Id], [w0].[Description], [w0].[DifficultyId], [w0].[LengthInKm], [w0].[Name], [w0].[RegionId], [w0].[WalkImageUrl], [d].[Id], [d].[Name], [r].[Id], [r].[Code], [r].[Name], [r].[RegionImageUrl]
FROM (
    SELECT [w].[Id], [w].[Description], [w].[DifficultyId], [w].[LengthInKm], [w].[Name], [w].[RegionId], [w].[WalkImageUrl]
    FROM [Walks] AS [w]
    ORDER BY (SELECT 1)
    OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
) AS [w0]
INNER JOIN [Difficulties] AS [d] ON [w0].[DifficultyId] = [d].[Id]
INNER JOIN [Regions] AS [r] ON [w0].[RegionId] = [r].[Id]
2025-07-10 23:43:55.035 +03:00 [INF] Executing OkObjectResult, writing value of type 'System.Collections.Generic.List`1[[NZWalks.API.Models.DTOs.WalkDto, NZWalks.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-07-10 23:43:55.052 +03:00 [INF] Executed action NZWalks.API.Controllers.WalksController.GetAll (NZWalks.API) in 1483.6904ms
2025-07-10 23:43:55.054 +03:00 [INF] Executed endpoint 'NZWalks.API.Controllers.WalksController.GetAll (NZWalks.API)'
2025-07-10 23:43:55.062 +03:00 [INF] Request finished HTTP/1.1 GET https://localhost:7123/api/Walks - 200 null application/json; charset=utf-8 1586.3742ms
2025-07-10 23:47:00.104 +03:00 [INF] User profile is available. Using 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-07-10 23:47:00.347 +03:00 [INF] Now listening on: https://localhost:7123
2025-07-10 23:47:00.349 +03:00 [INF] Now listening on: http://localhost:5026
2025-07-10 23:47:00.402 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2025-07-10 23:47:00.403 +03:00 [INF] Hosting environment: Development
2025-07-10 23:47:00.404 +03:00 [INF] Content root path: D:\Projects (.NET)\NZWalks\NZWalksAPI
2025-07-10 23:47:02.824 +03:00 [INF] Request starting HTTP/1.1 GET https://localhost:7123/WeatherForecast/GetWeatherForecast - application/json 186
2025-07-10 23:47:03.017 +03:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:47:02 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-07-10 23:47:03.047 +03:00 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:47:02 PM'.
2025-07-10 23:47:03.052 +03:00 [INF] Request finished HTTP/1.1 GET https://localhost:7123/WeatherForecast/GetWeatherForecast - 404 0 null 231.1051ms
2025-07-10 23:47:03.061 +03:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET https://localhost:7123/WeatherForecast/GetWeatherForecast, Response status code: 404
2025-07-10 23:47:34.907 +03:00 [INF] Request starting HTTP/1.1 GET https://localhost:7123/WeatherForecast - application/json 186
2025-07-10 23:47:35.060 +03:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:47:34 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-07-10 23:47:35.063 +03:00 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:47:34 PM'.
2025-07-10 23:47:35.065 +03:00 [INF] Executing endpoint 'NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API)'
2025-07-10 23:47:35.078 +03:00 [INF] Route matched with {action = "GetV1", controller = "WeatherForecast"}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[NZWalksAPI.WeatherForecast] GetV1() on controller NZWalksAPI.Controllers.WeatherForecastController (NZWalks.API).
2025-07-10 23:47:35.087 +03:00 [INF] Executing ObjectResult, writing value of type 'NZWalksAPI.WeatherForecast[]'.
2025-07-10 23:47:35.103 +03:00 [INF] Executed action NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API) in 19.3881ms
2025-07-10 23:47:35.106 +03:00 [INF] Executed endpoint 'NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API)'
2025-07-10 23:47:35.108 +03:00 [INF] Request finished HTTP/1.1 GET https://localhost:7123/WeatherForecast - 200 null application/json; charset=utf-8 201.1995ms
2025-07-10 23:47:46.345 +03:00 [INF] Request starting HTTP/1.1 GET https://localhost:7123/WeatherForecast/GetWeatherForecast/ - application/json 186
2025-07-10 23:47:46.416 +03:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:47:46 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-07-10 23:47:46.420 +03:00 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:47:46 PM'.
2025-07-10 23:47:46.422 +03:00 [INF] Request finished HTTP/1.1 GET https://localhost:7123/WeatherForecast/GetWeatherForecast/ - 404 0 null 76.9728ms
2025-07-10 23:47:46.428 +03:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET https://localhost:7123/WeatherForecast/GetWeatherForecast/, Response status code: 404
2025-07-10 23:47:49.820 +03:00 [INF] Request starting HTTP/1.1 GET https://localhost:7123/WeatherForecast/GetWeatherForecast - application/json 186
2025-07-10 23:47:49.883 +03:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:47:49 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-07-10 23:47:49.889 +03:00 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:47:49 PM'.
2025-07-10 23:47:49.891 +03:00 [INF] Request finished HTTP/1.1 GET https://localhost:7123/WeatherForecast/GetWeatherForecast - 404 0 null 71.1126ms
2025-07-10 23:47:49.893 +03:00 [INF] Request reached the end of the middleware pipeline without being handled by application code. Request path: GET https://localhost:7123/WeatherForecast/GetWeatherForecast, Response status code: 404
2025-07-10 23:47:55.666 +03:00 [INF] Request starting HTTP/1.1 GET https://localhost:7123/WeatherForecast - application/json 186
2025-07-10 23:47:55.736 +03:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:47:55 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-07-10 23:47:55.742 +03:00 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:47:55 PM'.
2025-07-10 23:47:55.746 +03:00 [INF] Executing endpoint 'NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API)'
2025-07-10 23:47:55.747 +03:00 [INF] Route matched with {action = "GetV1", controller = "WeatherForecast"}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[NZWalksAPI.WeatherForecast] GetV1() on controller NZWalksAPI.Controllers.WeatherForecastController (NZWalks.API).
2025-07-10 23:47:55.749 +03:00 [INF] Executing ObjectResult, writing value of type 'NZWalksAPI.WeatherForecast[]'.
2025-07-10 23:47:55.751 +03:00 [INF] Executed action NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API) in 2.0204ms
2025-07-10 23:47:55.752 +03:00 [INF] Executed endpoint 'NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API)'
2025-07-10 23:47:55.752 +03:00 [INF] Request finished HTTP/1.1 GET https://localhost:7123/WeatherForecast - 200 null application/json; charset=utf-8 86.9491ms
2025-07-10 23:49:41.713 +03:00 [INF] User profile is available. Using 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-07-10 23:49:41.937 +03:00 [INF] Now listening on: https://localhost:7123
2025-07-10 23:49:41.941 +03:00 [INF] Now listening on: http://localhost:5026
2025-07-10 23:49:41.979 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2025-07-10 23:49:41.981 +03:00 [INF] Hosting environment: Development
2025-07-10 23:49:41.984 +03:00 [INF] Content root path: D:\Projects (.NET)\NZWalks\NZWalksAPI
2025-07-10 23:49:45.720 +03:00 [INF] Request starting HTTP/1.1 GET https://localhost:7123/WeatherForecast - application/json 186
2025-07-10 23:49:45.941 +03:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:49:45 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-07-10 23:49:45.971 +03:00 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:49:45 PM'.
2025-07-10 23:49:45.976 +03:00 [INF] Executing endpoint 'NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API)'
2025-07-10 23:49:45.986 +03:00 [INF] Route matched with {action = "GetV1", controller = "WeatherForecast"}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[NZWalksAPI.WeatherForecast] GetV1() on controller NZWalksAPI.Controllers.WeatherForecastController (NZWalks.API).
2025-07-10 23:49:45.991 +03:00 [INF] Executing ObjectResult, writing value of type 'NZWalksAPI.WeatherForecast[]'.
2025-07-10 23:49:46.006 +03:00 [INF] Executed action NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API) in 14.891ms
2025-07-10 23:49:46.010 +03:00 [INF] Executed endpoint 'NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API)'
2025-07-10 23:49:46.013 +03:00 [INF] Request finished HTTP/1.1 GET https://localhost:7123/WeatherForecast - 200 null application/json; charset=utf-8 295.5477ms
2025-07-10 23:50:02.872 +03:00 [INF] User profile is available. Using 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-07-10 23:50:03.077 +03:00 [INF] Now listening on: https://localhost:7123
2025-07-10 23:50:03.082 +03:00 [INF] Now listening on: http://localhost:5026
2025-07-10 23:50:03.129 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2025-07-10 23:50:03.131 +03:00 [INF] Hosting environment: Development
2025-07-10 23:50:03.132 +03:00 [INF] Content root path: D:\Projects (.NET)\NZWalks\NZWalksAPI
2025-07-10 23:50:05.435 +03:00 [INF] Request starting HTTP/1.1 GET https://localhost:7123/WeatherForecast - application/json 186
2025-07-10 23:50:05.658 +03:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:50:05 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-07-10 23:50:05.696 +03:00 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:50:05 PM'.
2025-07-10 23:50:05.700 +03:00 [INF] Executing endpoint 'NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API)'
2025-07-10 23:50:05.710 +03:00 [INF] Route matched with {action = "GetV1", controller = "WeatherForecast"}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[NZWalksAPI.WeatherForecast] GetV1() on controller NZWalksAPI.Controllers.WeatherForecastController (NZWalks.API).
2025-07-10 23:50:05.716 +03:00 [INF] Executing ObjectResult, writing value of type 'NZWalksAPI.WeatherForecast[]'.
2025-07-10 23:50:05.734 +03:00 [INF] Executed action NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API) in 19.2512ms
2025-07-10 23:50:05.740 +03:00 [INF] Executed endpoint 'NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API)'
2025-07-10 23:50:05.742 +03:00 [INF] Request finished HTTP/1.1 GET https://localhost:7123/WeatherForecast - 200 null application/json; charset=utf-8 310.1603ms
2025-07-10 23:50:20.702 +03:00 [INF] Request starting HTTP/1.1 GET https://localhost:7123/WeatherForecast - application/json 186
2025-07-10 23:50:20.778 +03:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:50:20 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-07-10 23:50:20.784 +03:00 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:50:20 PM'.
2025-07-10 23:50:20.786 +03:00 [INF] Executing endpoint 'NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API)'
2025-07-10 23:50:20.786 +03:00 [INF] Route matched with {action = "GetV1", controller = "WeatherForecast"}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[NZWalksAPI.WeatherForecast] GetV1() on controller NZWalksAPI.Controllers.WeatherForecastController (NZWalks.API).
2025-07-10 23:50:20.788 +03:00 [INF] Executing ObjectResult, writing value of type 'NZWalksAPI.WeatherForecast[]'.
2025-07-10 23:50:20.789 +03:00 [INF] Executed action NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API) in 1.348ms
2025-07-10 23:50:20.790 +03:00 [INF] Executed endpoint 'NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API)'
2025-07-10 23:50:20.791 +03:00 [INF] Request finished HTTP/1.1 GET https://localhost:7123/WeatherForecast - 200 null application/json; charset=utf-8 88.1651ms
2025-07-10 23:50:28.808 +03:00 [INF] User profile is available. Using 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-07-10 23:50:28.990 +03:00 [INF] Now listening on: https://localhost:7123
2025-07-10 23:50:28.995 +03:00 [INF] Now listening on: http://localhost:5026
2025-07-10 23:50:29.028 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2025-07-10 23:50:29.030 +03:00 [INF] Hosting environment: Development
2025-07-10 23:50:29.034 +03:00 [INF] Content root path: D:\Projects (.NET)\NZWalks\NZWalksAPI
2025-07-10 23:50:30.026 +03:00 [INF] Request starting HTTP/1.1 GET https://localhost:7123/WeatherForecast - application/json 186
2025-07-10 23:50:30.271 +03:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:50:30 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-07-10 23:50:30.309 +03:00 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:50:30 PM'.
2025-07-10 23:50:30.312 +03:00 [INF] Executing endpoint 'NZWalksAPI.Controllers.WeatherForecastController.GetV2 (NZWalks.API)'
2025-07-10 23:50:30.320 +03:00 [INF] Route matched with {action = "GetV2", controller = "WeatherForecast"}. Executing controller action with signature System.Collections.Generic.IEnumerable`1[NZWalksAPI.WeatherForecast] GetV2() on controller NZWalksAPI.Controllers.WeatherForecastController (NZWalks.API).
2025-07-10 23:50:30.326 +03:00 [INF] Executing ObjectResult, writing value of type 'NZWalksAPI.WeatherForecast[]'.
2025-07-10 23:50:30.341 +03:00 [INF] Executed action NZWalksAPI.Controllers.WeatherForecastController.GetV2 (NZWalks.API) in 15.3777ms
2025-07-10 23:50:30.345 +03:00 [INF] Executed endpoint 'NZWalksAPI.Controllers.WeatherForecastController.GetV2 (NZWalks.API)'
2025-07-10 23:50:30.347 +03:00 [INF] Request finished HTTP/1.1 GET https://localhost:7123/WeatherForecast - 200 null application/json; charset=utf-8 325.2086ms
2025-07-10 23:50:48.272 +03:00 [INF] User profile is available. Using 'C:\Users\User\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-07-10 23:50:48.496 +03:00 [INF] Now listening on: https://localhost:7123
2025-07-10 23:50:48.498 +03:00 [INF] Now listening on: http://localhost:5026
2025-07-10 23:50:48.541 +03:00 [INF] Application started. Press Ctrl+C to shut down.
2025-07-10 23:50:48.542 +03:00 [INF] Hosting environment: Development
2025-07-10 23:50:48.543 +03:00 [INF] Content root path: D:\Projects (.NET)\NZWalks\NZWalksAPI
2025-07-10 23:50:49.850 +03:00 [INF] Request starting HTTP/1.1 GET https://localhost:7123/WeatherForecast - application/json 186
2025-07-10 23:50:49.891 +03:00 [INF] Multiple candidate actions were found, but none matched the requested service API version '3.0'. Candidate actions: NZWalksAPI.Controllers.WeatherForecastController.GetV1 (NZWalks.API)
NZWalksAPI.Controllers.WeatherForecastController.GetV2 (NZWalks.API)
2025-07-10 23:50:50.068 +03:00 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:50:50 PM'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2025-07-10 23:50:50.100 +03:00 [INF] Bearer was not authenticated. Failure message: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '7/9/2025 4:28:15 PM', Current time (UTC): '7/10/2025 8:50:50 PM'.
2025-07-10 23:50:50.102 +03:00 [INF] Executing endpoint 'Microsoft.AspNetCore.Http.Endpoint'
2025-07-10 23:50:50.106 +03:00 [INF] Executing ObjectResult, writing value of type '<>f__AnonymousType0`1[[<>f__AnonymousType1`3[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[<>f__AnonymousType2`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], Microsoft.AspNetCore.Mvc.Versioning, Version=5.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]], Microsoft.AspNetCore.Mvc.Versioning, Version=5.1.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]'.
2025-07-10 23:50:50.115 +03:00 [INF] Executed endpoint 'Microsoft.AspNetCore.Http.Endpoint'
2025-07-10 23:50:50.117 +03:00 [INF] Request finished HTTP/1.1 GET https://localhost:7123/WeatherForecast - 400 null application/json; charset=utf-8 269.4352ms
